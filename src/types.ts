/**
 * Represents a single interaction between the user and the AI assistant.
 * This structure is used throughout the extension to capture telemetry about
 * suggestions, enabling analytics and auditing features.
 */
export interface AIInteraction {
  /** A unique identifier for the interaction. */
  id: string;
  /** Unix timestamp in milliseconds representing when the interaction occurred. */
  timestamp: number;
  /** Indicates which surface triggered the interaction. */
  type: 'completion' | 'chat' | 'inline';
  /** The code or text context that was present before the AI responded. */
  prompt: string;
  /** The suggestion generated by the AI. */
  response: string;
  /** Programming language of the document associated with the interaction. */
  language: string;
  /** Relative path to the file from the workspace root. */
  filePath: string;
  /** Whether the user accepted the suggested completion. */
  accepted: boolean;
  /** Time in milliseconds the model took to generate the suggestion. */
  latency: number;
  /** Name of the model that produced the response (fixed to "copilot" for now). */
  modelName: string;
  /** Optional cursor line number where the interaction occurred. */
  lineNumber?: number;
  /** Number of characters contained in the suggestion. */
  characterCount: number;
  /** Supplemental metadata keyed by surface-specific attributes. */
  metadata?: Record<string, unknown>;

  // NEW FIELDS â€” richer telemetry
  /** Source surface (helps distinguish chat vs completion providers). */
  source?: 'copilot' | 'copilot-chat' | 'inline' | 'other';
  /** Identifier for a chat/session if applicable. */
  sessionId?: string;
  /** Identifier for a chat thread or conversation group. */
  threadId?: string;
  /** Tokens consumed by the request (if available). */
  tokensUsed?: number;
  /** Tokens attributable to the prompt (if available). */
  promptTokens?: number;
  /** Tokens attributable to the response (if available). */
  responseTokens?: number;
  /** Optional model-provided confidence / score in range 0..1. */
  confidence?: number;
  /** Version or revision of the assistant/model (if known). */
  assistantVersion?: string;
  /** Total elapsed time for end-to-end request (ms) including client-side overhead. */
  durationMs?: number;
  /** Size in bytes of the request payload (if measurable). */
  requestPayloadBytes?: number;
  /** Size in bytes of the response payload (if measurable). */
  responsePayloadBytes?: number;
}

/**
 * Aggregated analytics derived from AI interactions. These values power the
 * dashboards and reports presented to the user, providing insight into how
 * Copilot performs over time across languages and contexts.
 */
export interface AnalyticsData {
  /** Total number of captured interactions. */
  totalInteractions: number;
  /** Average latency across all interactions in milliseconds. */
  averageLatency: number;
  /** Percentage of interactions that were accepted by the user (0-100). */
  acceptanceRate: number;
  /** Top programming languages used, ordered by interaction count. */
  topLanguages: Array<{ language: string; count: number }>;
  /** Interactions bucketed by day or other time granularity for trend analysis. */
  interactionsOverTime: Array<{ date: string; count: number }>;

  // NEW AGGREGATES
  /** Median latency (ms). */
  medianLatency?: number;
  /** 95th percentile latency (ms). */
  p95Latency?: number;
  /** Interaction counts grouped by model name. */
  interactionsByModel?: Array<{ modelName: string; count: number }>;
  /** Average tokens used per interaction (if tokens available). */
  averageTokensUsed?: number;
}

/**
 * Enumerates the core events emitted throughout the extension lifecycle. This
 * is used by the EventBus to provide strong typing and prevent invalid event
 * names from being used when subscribing or emitting.
 */
export type EventType = 'interaction' | 'error' | 'status';

/**
 * Options that can be supplied when querying stored interaction data. These
 * allow consumers to narrow down analytics requests to a specific time range,
 * language, or model.
 */
export interface FilterOptions {
  /** Optional start date (inclusive) expressed as a Unix timestamp in milliseconds. */
  startDate?: number;
  /** Optional end date (inclusive) expressed as a Unix timestamp in milliseconds. */
  endDate?: number;
  /** Filter to interactions that match a specific programming language. */
  language?: string;
  /** Filter to interactions created by a given model name. */
  modelName?: string;
}
